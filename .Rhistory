cglwd = 1, cglcol = "darkgrey", axislabcol = "black", title = "",
maxmin = TRUE, na.itp = TRUE, centerzero = FALSE, vlabels = NULL,
vlcex = NULL, caxislabels = NULL, calcex = NULL, paxislabels = NULL,
palcex = NULL, ...)
{
if (!is.data.frame(df)) {
cat("The data must be given as dataframe.\n")
return()
}
if ((n <- length(df)) < 3) {
cat("The number of variables must be 3 or more.\n")
return()
}
if (maxmin == FALSE) {
dfmax <- apply(df, 2, max)
dfmin <- apply(df, 2, min)
df <- rbind(dfmax, dfmin, df)
}
plot(c(-1.2, 1.2), c(-1.2, 1.2), type = "n", frame.plot = FALSE,
axes = FALSE, xlab = "", ylab = "", main = title, asp = 1,
...)
theta <- seq(90, 450, length = n + 1) * pi/180
theta <- theta[1:n]
xx <- cos(theta)
yy <- sin(theta)
CGap <- ifelse(centerzero, 0, 1)
for (i in 0:seg) {
polygon(xx * (i + CGap)/(seg + CGap), yy * (i + CGap)/(seg +
CGap), lty = cglty, lwd = cglwd, border = cglcol)
if (axistype == 1 | axistype == 3)
CAXISLABELS <- paste(i/seg * 100, "(%)")
if (axistype == 4 | axistype == 5)
CAXISLABELS <- sprintf("%3.2f", i/seg)
if (axistype == 2 )
CAXISLABELS <- paste(i)
if (!is.null(caxislabels) & (i < length(caxislabels)))
CAXISLABELS <- caxislabels[i + 1]
if (axistype == 1 | axistype == 3 | axistype == 4 | axistype ==
5 | axistype == 2) {
if (is.null(calcex))
text(-0.05, (i + CGap)/(seg + CGap), CAXISLABELS,
col = axislabcol)
else text(-0.05, (i + CGap)/(seg + CGap), CAXISLABELS,
col = axislabcol, cex = calcex)
}
}
if (centerzero) {
arrows(0, 0, xx * 1, yy * 1, lwd = cglwd, lty = cglty,
length = 0, col = cglcol)
}
else {
arrows(xx/(seg + CGap), yy/(seg + CGap), xx * 1, yy *
1, lwd = cglwd, lty = cglty, length = 0, col = cglcol)
}
PAXISLABELS <- df[1, 1:n]
if (!is.null(paxislabels))
PAXISLABELS <- paxislabels
if ( axistype == 3 | axistype == 5) {
if (is.null(palcex))
text(xx[1:n], yy[1:n], PAXISLABELS, col = axislabcol)
else text(xx[1:n], yy[1:n], PAXISLABELS, col = axislabcol,
cex = palcex)
}
VLABELS <- colnames(df)
if (!is.null(vlabels))
VLABELS <- vlabels
if (is.null(vlcex))
text(xx * 1.2, yy * 1.2, VLABELS)
else text(xx * 1.2, yy * 1.2, VLABELS, cex = vlcex)
series <- length(df[[1]])
SX <- series - 2
if (length(pty) < SX) {
ptys <- rep(pty, SX)
}
else {
ptys <- pty
}
if (length(pcol) < SX) {
pcols <- rep(pcol, SX)
}
else {
pcols <- pcol
}
if (length(plty) < SX) {
pltys <- rep(plty, SX)
}
else {
pltys <- plty
}
if (length(plwd) < SX) {
plwds <- rep(plwd, SX)
}
else {
plwds <- plwd
}
if (length(pdensity) < SX) {
pdensities <- rep(pdensity, SX)
}
else {
pdensities <- pdensity
}
if (length(pangle) < SX) {
pangles <- rep(pangle, SX)
}
else {
pangles <- pangle
}
if (length(pfcol) < SX) {
pfcols <- rep(pfcol, SX)
}
else {
pfcols <- pfcol
}
medians <- apply(df, 2, median, na.rm = TRUE)
lowerQuartile <- apply(df, 2, function(x) quantile(x, 0.25))
upperQuartile <- apply(df, 2, function(x) quantile(x, 0.75))
for (i in 3:series) {
xxs <- xx
yys <- yy
# Berechnung der Skalierung für das untere (Q1) und obere (Q3) Quartil
scaleLower <- CGap/(seg + CGap) + (lowerQuartile - df[2, ])/(df[1, ] - df[2, ]) * seg/(seg + CGap)
scaleUpper <- CGap/(seg + CGap) + (upperQuartile - df[2, ])/(df[1, ] - df[2, ]) * seg/(seg + CGap)
# Berechnung der Koordinaten für das untere (Q1) und obere (Q3) Quartil
xLower <- c(xx * scaleLower, xx[1] * scaleLower[1])
yLower <- c(yy * scaleLower, yy[1] * scaleLower[1])
xUpper <- c(xx * scaleUpper, xx[1] * scaleUpper[1])
yUpper <- c(yy * scaleUpper, yy[1] * scaleUpper[1])
# Zeichnen eines Polygons (Schattierung) zwischen dem unteren (Q1) und oberen (Q3) Quartil
polygon(c(xLower, rev(xUpper)), c(yLower, rev(yUpper)), col=rgb(0.5, 0.5, 0.5, alpha = pdensity) , border = NA)
# Mediane für jede Spalte berechnen
medians <- apply(df[-c(1, 2), ], 2, median, na.rm = TRUE)
# Skalierung für Mediane berechnen
median_scale <- CGap / (seg + CGap) + (medians - df[2, ]) / (df[1, ] - df[2, ]) * seg / (seg + CGap)
# Koordinaten für Mediane berechnen
xx_medians <- xx * median_scale
yy_medians <- yy * median_scale
# Mediane Punkte plotten
points(xx_medians, yy_medians, pch = 16, col = "red")
# Mediane Punkte zu einem Ring verbinden
lines(c(xx_medians, xx_medians[1]), c(yy_medians, yy_medians[1]), col = "red", lwd = 2)
}
}
mradarchart(student1_data)
mradarBoxplot <- function (df, axistype = 0, seg = 4, pty = 16, pcol = 1:8, plty = 1:6,
plwd = 1, pdensity = 0.01, pangle = 45, pfcol = NA, cglty = 3,
cglwd = 1, cglcol = "darkgrey", axislabcol = "black", title = "",
maxmin = TRUE, na.itp = TRUE, centerzero = FALSE, vlabels = NULL,
vlcex = NULL, caxislabels = NULL, calcex = NULL, paxislabels = NULL,
palcex = NULL, ...)
{
if (!is.data.frame(df)) {
cat("The data must be given as dataframe.\n")
return()
}
if ((n <- length(df)) < 3) {
cat("The number of variables must be 3 or more.\n")
return()
}
if (maxmin == FALSE) {
dfmax <- apply(df, 2, max)
dfmin <- apply(df, 2, min)
df <- rbind(dfmax, dfmin, df)
}
plot(c(-1.2, 1.2), c(-1.2, 1.2), type = "n", frame.plot = FALSE,
axes = FALSE, xlab = "", ylab = "", main = title, asp = 1,
...)
theta <- seq(90, 450, length = n + 1) * pi/180
theta <- theta[1:n]
xx <- cos(theta)
yy <- sin(theta)
CGap <- ifelse(centerzero, 0, 1)
for (i in 0:seg) {
polygon(xx * (i + CGap)/(seg + CGap), yy * (i + CGap)/(seg +
CGap), lty = cglty, lwd = cglwd, border = cglcol)
if (axistype == 1 | axistype == 3)
CAXISLABELS <- paste(i/seg * 100, "(%)")
if (axistype == 4 | axistype == 5)
CAXISLABELS <- sprintf("%3.2f", i/seg)
if (axistype == 2 )
CAXISLABELS <- paste(i)
if (!is.null(caxislabels) & (i < length(caxislabels)))
CAXISLABELS <- caxislabels[i + 1]
if (axistype == 1 | axistype == 3 | axistype == 4 | axistype ==
5 | axistype == 2) {
if (is.null(calcex))
text(-0.05, (i + CGap)/(seg + CGap), CAXISLABELS,
col = axislabcol)
else text(-0.05, (i + CGap)/(seg + CGap), CAXISLABELS,
col = axislabcol, cex = calcex)
}
}
if (centerzero) {
arrows(0, 0, xx * 1, yy * 1, lwd = cglwd, lty = cglty,
length = 0, col = cglcol)
}
else {
arrows(xx/(seg + CGap), yy/(seg + CGap), xx * 1, yy *
1, lwd = cglwd, lty = cglty, length = 0, col = cglcol)
}
PAXISLABELS <- df[1, 1:n]
if (!is.null(paxislabels))
PAXISLABELS <- paxislabels
if ( axistype == 3 | axistype == 5) {
if (is.null(palcex))
text(xx[1:n], yy[1:n], PAXISLABELS, col = axislabcol)
else text(xx[1:n], yy[1:n], PAXISLABELS, col = axislabcol,
cex = palcex)
}
VLABELS <- colnames(df)
if (!is.null(vlabels))
VLABELS <- vlabels
if (is.null(vlcex))
text(xx * 1.2, yy * 1.2, VLABELS)
else text(xx * 1.2, yy * 1.2, VLABELS, cex = vlcex)
series <- length(df[[1]])
SX <- series - 2
if (length(pty) < SX) {
ptys <- rep(pty, SX)
}
else {
ptys <- pty
}
if (length(pcol) < SX) {
pcols <- rep(pcol, SX)
}
else {
pcols <- pcol
}
if (length(plty) < SX) {
pltys <- rep(plty, SX)
}
else {
pltys <- plty
}
if (length(plwd) < SX) {
plwds <- rep(plwd, SX)
}
else {
plwds <- plwd
}
if (length(pdensity) < SX) {
pdensities <- rep(pdensity, SX)
}
else {
pdensities <- pdensity
}
if (length(pangle) < SX) {
pangles <- rep(pangle, SX)
}
else {
pangles <- pangle
}
if (length(pfcol) < SX) {
pfcols <- rep(pfcol, SX)
}
else {
pfcols <- pfcol
}
medians <- apply(df, 2, median, na.rm = TRUE)
lowerQuartile <- apply(df, 2, function(x) quantile(x, 0.25))
upperQuartile <- apply(df, 2, function(x) quantile(x, 0.75))
for (i in 3:series) {
xxs <- xx
yys <- yy
# Berechnung der Skalierung für das untere (Q1) und obere (Q3) Quartil
scaleLower <- CGap/(seg + CGap) + (lowerQuartile - df[2, ])/(df[1, ] - df[2, ]) * seg/(seg + CGap)
scaleUpper <- CGap/(seg + CGap) + (upperQuartile - df[2, ])/(df[1, ] - df[2, ]) * seg/(seg + CGap)
# Berechnung der Koordinaten für das untere (Q1) und obere (Q3) Quartil
xLower <- c(xx * scaleLower, xx[1] * scaleLower[1])
yLower <- c(yy * scaleLower, yy[1] * scaleLower[1])
xUpper <- c(xx * scaleUpper, xx[1] * scaleUpper[1])
yUpper <- c(yy * scaleUpper, yy[1] * scaleUpper[1])
# Zeichnen eines Polygons (Schattierung) zwischen dem unteren (Q1) und oberen (Q3) Quartil
polygon(c(xLower, rev(xUpper)), c(yLower, rev(yUpper)), col=rgb(0.5, 0.5, 0.5, alpha = pdensity) , border = NA)
# Mediane für jede Spalte berechnen
medians <- apply(df[-c(1, 2), ], 2, median, na.rm = TRUE)
# Skalierung für Mediane berechnen
median_scale <- CGap / (seg + CGap) + (medians - df[2, ]) / (df[1, ] - df[2, ]) * seg / (seg + CGap)
# Koordinaten für Mediane berechnen
xx_medians <- xx * median_scale
yy_medians <- yy * median_scale
# Mediane Punkte plotten
points(xx_medians, yy_medians, pch = 16, col = "red")
# Mediane Punkte zu einem Ring verbinden
lines(c(xx_medians, xx_medians[1]), c(yy_medians, yy_medians[1]), col = "red", lwd = 2)
}
}
mradarBoxplot(student1_data)
mradarBoxplot(df, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Training Methods", "Training \n support", "Training situation","Training \n Level of Difficult"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
mradarBoxplot(student1_data, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Training Methods", "Training \n support", "Training situation","Training \n Level of Difficult"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
# Demo data
exam_scores <- data.frame(
row.names = c("Student.1", "Student.2", "Student.3"),
Biology = c(7.9, 3.9, 9.4),
Physics = c(10, 20, 0),
Maths = c(3.7, 11.5, 2.5),
Sport = c(8.7, 20, 4),
English = c(7.9, 7.2, 12.4),
Geography = c(6.4, 10.5, 6.5),
Art = c(2.4, 0.2, 9.8),
Programming = c(0, 0, 20),
Music = c(20, 20, 20)
)
max_min <- data.frame(
Biology = c(20, 0), Physics = c(20, 0), Maths = c(20, 0),
Sport = c(20, 0), English = c(20, 0), Geography = c(20, 0),
Art = c(20, 0), Programming = c(20, 0), Music = c(20, 0)
)
rownames(max_min) <- c("Max", "Min")
df <- rbind(max_min, exam_scores)
student1_data <- df[c("Max", "Min", "Student.1"), ]
mradarBoxplot(student1_data, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Training Methods", "Training \n support", "Training situation","Training \n Level of Difficult"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
# Demo data
exam_scores <- data.frame(
row.names = c("Student.1", "Student.2", "Student.3"),
Biology = c(7.9, 3.9, 9.4),
Physics = c(10, 20, 0),
Maths = c(3.7, 11.5, 2.5),
Sport = c(8.7, 20, 4),
English = c(7.9, 7.2, 12.4),
Geography = c(6.4, 10.5, 6.5),
Art = c(2.4, 0.2, 9.8),
Programming = c(0, 0, 20),
Music = c(20, 20, 20)
)
max_min <- data.frame(
Biology = c(20, 0), Physics = c(20, 0), Maths = c(20, 0),
Sport = c(20, 0), English = c(20, 0), Geography = c(20, 0),
Art = c(20, 0), Programming = c(20, 0), Music = c(20, 0)
)
rownames(max_min) <- c("Max", "Min")
df <- rbind(max_min, exam_scores)
df
`dataset` <- read_excel("~/TT_t1_t2_t3_TT-Scales_v3.0_if_2022-09-30_aly.xlsx",   sheet = "TT_t1_Daten")
library(readxl)
`dataset` <- read_excel("~/TT_t1_t2_t3_TT-Scales_v3.0_if_2022-09-30_aly.xlsx",   sheet = "TT_t1_Daten")
dataset <- dataset[, c("TM_scale", "TSUP_scale","TSIT_scale","TLOD_scale")]
datset
dataset
dataset <- na.omit(dataset)
max_min <- data.frame(
"TM_scale" = c(7, 1), "TSUP_scale" = c(7, 1), "TSIT_scale" = c(7, 1),
"TLOD_scale" = c(7, 1)
)
rownames(max_min) <- c("Max", "Min")
# Bind the variable ranges to the data
df.m <- rbind(max_min, dataset)
df.m
mradarBoxplot(df.m, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Training Methods", "Training \n support", "Training situation","Training \n Level of Difficult"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
`dataset` <- read_excel("~/TT_t1_t2_t3_TT-Scales_v3.0_if_2022-09-30_aly.xlsx",   sheet = "TT_t1_Daten")
dataset <- dataset[, c("TM_scale", "TSUP_scale","TSIT_scale","TLOD_scale")]
dataset <- na.omit(dataset)
datset
dataset
mtcars
df <- data(mtcars)
df
df <- dload(mtcars)
df <- load(mtcars)
data(mtcars)
data
data("mtcars")
dataset <- data.frame(
Var1 = runif(100, 0, 7),
Var2 = runif(100, 0, 7),
Var3 = runif(100, 0, 7),
Var4 = runif(100, 0, 7),
Var5 = runif(100, 0, 7),
Var6 = runif(100, 0, 7)
)
dataet
dataset
# Demo data
dataset <- data.frame(
Var1 = runif(100, 0, 7),
Var2 = runif(100, 0, 7),
Var3 = runif(100, 0, 7),
Var4 = runif(100, 0, 7),
Var5 = runif(100, 0, 7),
Var6 = runif(100, 0, 7)
)
max_min <- data.frame(
var1 = c(7, 0), var2 = c(7, 0), var3 = c(7, 0),
var4 = c(7), var5 = c(7, 0), var6 = c(7)
)
rownames(max_min) <- c("Max", "Min")
mradarBoxplot(df, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Training Methods", "Training \n support", "Training situation","Training \n Level of Difficult"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
df <- rbind(max_min, dataset)
# Demo data
dataset <- data.frame(
Var1 = runif(100, 0, 7),
Var2 = runif(100, 0, 7),
Var3 = runif(100, 0, 7),
Var4 = runif(100, 0, 7),
Var5 = runif(100, 0, 7),
Var6 = runif(100, 0, 7)
)
max_min <- data.frame(
var1 = c(7, 0), var2 = c(7, 0), var3 = c(7, 0),
var4 = c(7), var5 = c(7, 0), var6 = c(7)
)
rownames(max_min) <- c("Max", "Min")
df <- rbind(max_min, dataset)
df <- rbind(max_min, dataset)
max_min <- data.frame(
var1 = c(7, 0), var2 = c(7, 0), var3 = c(7, 0),
var4 = c(7), var5 = c(7, 0), var6 = c(7)
)
max_min
max_min <- data.frame(
var1 = c(7, 0), var2 = c(7, 0), var3 = c(7, 0),
var4 = c(7), var5 = c(7, 0), var6 = c(7,0)
)
rownames(max_min) <- c("Max", "Min")
df <- rbind(max_min, dataset)
# Demo data
dataset <- data.frame(
Var1 = runif(100, 0, 7),
Var2 = runif(100, 0, 7),
Var3 = runif(100, 0, 7),
Var4 = runif(100, 0, 7),
Var5 = runif(100, 0, 7),
Var6 = runif(100, 0, 7)
)
max_min <- data.frame(
var1 = c(7, 0), var2 = c(7, 0), var3 = c(7, 0),
var4 = c(7), var5 = c(7, 0), var6 = c(7,0)
)
max_min <- data.frame(
Var1 = c(7, 0), Var2 = c(7, 0), Var3 = c(7, 0),
Var4 = c(7), Var5 = c(7, 0), Var6 = c(7,0)
)
rownames(max_min) <- c("Max", "Min")
df <- rbind(max_min, dataset)
mradarBoxplot(df, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Training Methods", "Training \n support", "Training situation","Training \n Level of Difficult"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
mradarBoxplot(df, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Var1", "Var2", "var3","Var4","Var5","Var6"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
# Demo data
dataset <- data.frame(
Var1 = runif(100, 0, 7),
Var2 = runif(100, 0, 7),
Var3 = runif(100, 0, 7),
Var4 = runif(100, 0, 7),
Var5 = runif(100, 0, 7)
)
max_min <- data.frame(
Var1 = c(7, 0), Var2 = c(7, 0), Var3 = c(7, 0),
Var4 = c(7), Var5 = c(7, 0)
)
rownames(max_min) <- c("Max", "Min")
df <- rbind(max_min, dataset)
mradarBoxplot(df, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Var1", "Var2", "var3","Var4","Var5","Var6"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
max_min <- data.frame(
Var1 = c(7, 0), Var2 = c(7, 0), Var3 = c(7, 0),
Var4 = c(7,0), Var5 = c(7, 0)
)
rownames(max_min) <- c("Max", "Min")
df <- rbind(max_min, dataset)
mradarBoxplot(df, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Var1", "Var2", "var3","Var4","Var5","Var6"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
# Demo data
dataset <- data.frame(
Var1 = runif(100, 0, 7),
Var2 = runif(100, 0, 7),
Var3 = runif(100, 0, 7),
Var4 = runif(100, 0, 7),
Var5 = runif(100, 0, 7),
Var6 = runif(100, 0, 7)
)
max_min <- data.frame(
Var1 = c(7, 0), Var2 = c(7, 0), Var3 = c(7, 0),
Var4 = c(7,0), Var5 = c(7, 0), Var6 = c(7,0)
)
rownames(max_min) <- c("Max", "Min")
df <- rbind(max_min, dataset)
mradarBoxplot(df, seg = 7, axistype = 2, title = "Learning retention", centerzero =TRUE, vlabels = c("Var1", "Var2", "var3","Var4","Var5","Var6"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
?wradarBoxplot
?wradarBoxlot
?wradarBoxlot
mradarBoxplot(df, seg = 7, axistype = 2, title = "Variables", centerzero =TRUE, vlabels = c("Var1", "Var2", "Var3","Var4","Var5","Var6"), cglcol = "black", maxmin = TRUE, pdensity = 0.006, calcex = 0.7, vlcex = 0.75)
?wradarBoxplot
?wradarBoxplot
?wradarBoxplot
?wradarBoxplot
roxygen2::roxygenise()
devtools::document()
roxygenise();
library(roxygen2);
roxygenise()
roxygenise();
roxygenise();
roxygenise();
roxygenise();
roxygenise();
roxygenise();
roxygenise();
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
?wradarBoxplot
library(devtools)
check()
install()
library(wetzel)
check()
check()
library(devtools)
check()
use_git()
